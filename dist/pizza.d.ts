import EventEmitter from './event';
import Options, { OptionsData } from './options';
import { VNode } from './vnode';
declare class Pizza extends EventEmitter {
    $componentId: any;
    $options: Options;
    $propsData: object;
    $eventsData: object;
    $data: object;
    $vnode: VNode;
    $render: Function;
    $context: Pizza;
    $children: any[];
    $componentName: string;
    $mounted: boolean;
    $destroyed: boolean;
    $update: Function;
    $el?: HTMLElement | DocumentFragment;
    protected _mountElement?: HTMLElement;
    static $$id: number;
    constructor(componentOptions?: OptionsData, options?: any);
    protected _init(): void;
    get $methods(): object;
    get $components(): {};
    $set(key: string, value: any): void;
    $get(key: string, _default?: any): any;
    $setPropsData(data: object): void;
    $setEventsData(data: object): void;
    protected _injectHooks(): void;
    $emit(name: string, ...args: any): void;
    $invoke(method: string, ...args: any): any;
    private _invokeWatch;
    $forceUpdate(): boolean;
    $nextTick(fn: Function): void;
    protected _render(): boolean;
    protected _patch(vnode: VNode): void;
    $mount(element?: HTMLElement): void;
    $destroy(): void;
    static $PROPS_EVENT_PREFIX: string;
    static register(name: string, options?: OptionsData): OptionsData;
}
export default Pizza;
